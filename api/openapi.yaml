openapi: 3.0.3
info:
  title: Bulktrack API
  version: 1.0.0
  description: |
    API definition for the BulkTrack application.
servers:
  - url: https://api.bulk-track.com/v1
    description: Production server
  - url: http://localhost:8787/v1
    description: Local development server

security:
  - BearerAuth: []

paths:
  # ---------------- Auth ---------------- #
  /v1/auth/device:
    post:
      summary: Activate a new device (anonymous onboarding)
      tags: [Auth]
      parameters:
        - name: X-Device-Id
          in: header
          required: true
          description: UUID v7 of the device
          schema: { type: string, format: uuid }
      responses:
        '200': { description: Device tokens issued, content: { application/json: { schema: { $ref: '#/components/schemas/TokenResponse' } } } }
      security: []

  /v1/auth/apple:
    post:
      summary: Link or sign-in with Apple
      tags: [Auth]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [identityToken]
              properties:
                identityToken: { type: string, description: Apple identity token (JWT) }
      responses:
        '200': { description: User tokens, content: { application/json: { schema: { $ref: '#/components/schemas/TokenResponse' } } } }
      security: []

  /v1/auth/refresh:
    post:
      summary: Refresh access token
      tags: [Auth]
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: '#/components/schemas/RefreshTokenRequest' }
      responses:
        '200': { description: Tokens refreshed, content: { application/json: { schema: { $ref: '#/components/schemas/TokenResponse' } } } }
      security: []

  /v1/auth/logout:
    post:
      summary: Log out (revoke refresh token)
      tags: [Auth]
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: '#/components/schemas/RefreshTokenRequest' }
      responses:
        '204': { description: Logged out }
      security: []

  # ---------------- Users & Devices ---------------- #
  /v1/users:
    post:
      summary: Create user manually (debug / admin)
      tags: [Users]
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: '#/components/schemas/UserCreate' }
      responses:
        '201': { description: Created, content: { application/json: { schema: { $ref: '#/components/schemas/User' } } } }
  
  /v1/devices:
    post:
      summary: Register device to user (post-Apple link)
      tags: [Devices]
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: '#/components/schemas/DeviceCreate' }
      responses:
        '201': { description: Device registered, content: { application/json: { schema: { $ref: '#/components/schemas/Device' } } } }

  # ---------------- Exercises ---------------- #
  /v1/exercises:
    get:
      summary: Search or list recent exercises
      tags: [Exercises]
      parameters:
        - in: query
          name: q
          schema: { type: string }
          description: Prefix search string
        - in: query
          name: locale
          schema: { type: string, default: ja }
      responses:
        '200': { description: List, content: { application/json: { schema: { type: array, items: { $ref: '#/components/schemas/Exercise' } } } } }
    post:
      summary: Create custom exercise
      tags: [Exercises]
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: '#/components/schemas/ExerciseCreate' }
      responses:
        '201': { description: Created, content: { application/json: { schema: { $ref: '#/components/schemas/Exercise' } } } }

  /v1/me/exercises/recent:
    get:
      summary: List recently used exercises for the authenticated user
      tags: [Exercises]
      parameters:
        - in: query
          name: limit
          schema:
            type: integer
            default: 20
          description: Maximum number of exercises to return.
        - in: query
          name: offset
          schema:
            type: integer
            default: 0
          description: Offset for pagination.
        - in: query
          name: locale
          schema:
            type: string
            default: ja
          description: Locale for exercise names (e.g., 'en', 'ja').
      responses:
        '200':
          description: A list of recently used exercises.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Exercise'
        '401':
          description: Unauthorized
      security:
        - BearerAuth: []

  # ---------------- Sets (formerly Sessions & Sets) ---------------- #
  /v1/sets:
    post:
      summary: Add set
      tags: [Sets]
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: '#/components/schemas/SetCreate' }
      responses:
        '201': { description: Recorded, content: { application/json: { schema: { $ref: '#/components/schemas/WorkoutSet' } } } }
        '400': { description: Invalid request body or parameters, content: { application/json: { schema: { $ref: '#/components/schemas/Error' } } } }
        '401': { description: Unauthorized, content: { application/json: { schema: { $ref: '#/components/schemas/Error' } } } }
      security:
        - BearerAuth: []
    get:
      summary: List sets for the authenticated user
      tags: [Sets]
      parameters:
        - in: query
          name: limit
          schema: { type: integer, default: 20 }
        - in: query
          name: offset
          schema: { type: integer, default: 0 }
        - in: query
          name: date
          schema: { type: string, format: date }
          description: Filter sets for a specific date (YYYY-MM-DD).
        - in: query
          name: exerciseId
          schema: { type: string, format: uuid }
          description: Filter sets by exercise ID.
      responses:
        '200': { description: List, content: { application/json: { schema: { type: array, items: { $ref: '#/components/schemas/WorkoutSet' } } } } }
        '401': { description: Unauthorized, content: { application/json: { schema: { $ref: '#/components/schemas/Error' } } } }
      security:
        - BearerAuth: []

  /v1/sets/{setId}:
    patch:
      summary: Update a specific workout set
      tags: [Sets]
      parameters:
        - name: setId
          in: path
          required: true
          description: ID of the set to update
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SetUpdate'
      responses:
        '200': { description: Updated, content: { application/json: { schema: { $ref: '#/components/schemas/WorkoutSet' } } } }
        '400': { description: Invalid request body or parameters, content: { application/json: { schema: { $ref: '#/components/schemas/Error' } } } }
        '401': { description: Unauthorized, content: { application/json: { schema: { $ref: '#/components/schemas/Error' } } } }
        '403': { description: Forbidden, content: { application/json: { schema: { $ref: '#/components/schemas/Error' } } } }
        '404': { description: Set not found, content: { application/json: { schema: { $ref: '#/components/schemas/Error' } } } }
      security:
        - BearerAuth: []
    delete:
      summary: Delete a specific workout set
      tags: [Sets]
      parameters:
        - name: setId
          in: path
          required: true
          description: ID of the set to delete
          schema:
            type: string
            format: uuid
      responses:
        '204': { description: Set deleted successfully }
        '401': { description: Unauthorized, content: { application/json: { schema: { $ref: '#/components/schemas/Error' } } } }
        '403': { description: Forbidden, content: { application/json: { schema: { $ref: '#/components/schemas/Error' } } } }
        '404': { description: Set not found, content: { application/json: { schema: { $ref: '#/components/schemas/Error' } } } }
      security:
        - BearerAuth: []

  # ---------------- Dashboard ---------------- #
  /v1/dashboard:
    get:
      summary: Fetch dashboard aggregates
      tags: [Dashboard]
      parameters:
        - in: query
          name: span
          schema:
            type: string
            enum: [1w, 4w, 8w, 12w, 24w]
            default: 1w
          description: Week span window (inclusive, ending current ISO week).
      responses:
        '200':
          description: Dashboard payload
          content:
            application/json:
              schema: { $ref: '#/components/schemas/DashboardResponse' }

  # ---------------- Utility ---------------- #
  /v1/ping:
    get:
      summary: Health check
      tags: [Utility]
      responses:
        '200':
          description: pong
          content:
            application/json:
              schema:
                type: object
                properties:
                  message: { type: string, example: pong }
      security: []

components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: Global Bearer auth

  parameters:
    SessionId:
      name: sessionId
      in: path
      required: true
      description: ID of the session
      schema:
        type: string
        format: uuid

  # ---- Schemas (same as previous version, trimmed) ---- #
  schemas:
    TokenResponse:
      type: object
      properties:
        accessToken: { type: string }
        refreshToken: { type: string }
        expiresIn: { type: integer }
      required: [accessToken, refreshToken, expiresIn]
    RefreshTokenRequest:
      type: object
      properties:
        refreshToken: { type: string }
      required: [refreshToken]
    UserCreate:
      type: object
      required: [displayName]
      properties:
        displayName: { type: string }
    User:
      allOf:
        - $ref: '#/components/schemas/UserCreate'
        - type: object
          properties:
            id: { type: string, format: uuid }
            createdAt: { type: string, format: date-time }
    DeviceCreate:
      type: object
      required: [userId]
      properties:
        userId: { type: string, format: uuid }
        platform: { type: string }
    Device:
      allOf:
        - $ref: '#/components/schemas/DeviceCreate'
        - type: object
          properties:
            deviceId: { type: string, format: uuid }
            linkedAt: { type: string, format: date-time }
    ExerciseCreate:
      type: object
      required: [name]
      properties:
        name: { type: string }
    Exercise:
      type: object
      properties:
        id: { type: string, format: uuid }
        name: { type: string }
        lastUsedAt: { type: string, format: date-time, nullable: true }
        useCount: { type: integer, nullable: true }
    SessionStart:
      type: object
      required: [startedAt]
      properties:
        startedAt: { type: string, format: date-time }
        notes: { type: string, nullable: true }
    WorkoutSession:
      type: object
      properties:
        id: { type: string, format: uuid }
        userId: { type: string, format: uuid }
        startedAt: { type: string, format: date-time }
        finishedAt: { type: string, format: date-time, nullable: true }
        notes: { type: string, nullable: true }
    SessionDetail:
      allOf:
        - $ref: '#/components/schemas/WorkoutSession'
        - type: object
          properties:
            sets:
              type: array
              items: { $ref: '#/components/schemas/WorkoutSet' }
    SetCreate:
      type: object
      required:
        - exerciseId
        - weight
        - reps
        - performedAt
      properties:
        exerciseId:
          type: string
          format: uuid
          description: ID of the exercise for this set.
        weight:
          type: number
          format: float
          description: Weight used for the set (e.g., in kg or lbs).
        reps:
          type: integer
          description: Number of repetitions performed.
        # distance:
        #   type: number
        #   format: float
        #   nullable: true
        #   description: Distance covered (e.g., for cardio exercises, in km or miles).
        # duration:
        #   type: integer
        #   nullable: true
        #   description: Duration of the set (e.g., for timed exercises, in seconds).
        rpe:
          type: number
          format: float
          nullable: true
          minimum: 1
          maximum: 10
          description: Rating of Perceived Exertion (1-10).
        notes:
          type: string
          nullable: true
          description: Additional notes for the set.
        performedAt:
          type: string
          format: date-time
          description: Timestamp when the set was performed.
    WorkoutSet:
      type: object
      properties:
        id: { type: string, format: uuid }
        sessionId: { type: string, format: uuid }
        exerciseId: { type: string, format: uuid }
        setNumber: { type: integer, description: "The order of the set in the session." }
        exerciseName: { type: string, description: Name of the exercise, potentially translated }
        weight: { type: number, format: float }
        reps: { type: integer }
        # distance: { type: number, format: float, nullable: true }
        # duration: { type: integer, nullable: true }
        rpe: { type: number, format: float, nullable: true, minimum: 1, maximum: 10 }
        notes: { type: string, nullable: true }
        performedAt: { type: string, format: date-time }
    SetUpdate:
      type: object
      properties:
        exerciseId:
          type: string
          format: uuid
          nullable: true
          description: ID of the exercise for this set.
        weight:
          type: number
          format: float
          nullable: true
          description: Weight used for the set (e.g., in kg or lbs).
        reps:
          type: integer
          nullable: true
          description: Number of repetitions performed.
        # distance:
        #   type: number
        #   format: float
        #   nullable: true
        #   description: Distance covered (e.g., for cardio exercises, in km or miles).
        # duration:
        #   type: integer
        #   nullable: true
        #   description: Duration of the set (e.g., for timed exercises, in seconds).
        rpe:
          type: number
          format: float
          nullable: true
          minimum: 1
          maximum: 10
          description: Rating of Perceived Exertion (1-10).
        notes:
          type: string
          nullable: true
          description: Additional notes for the set.
        performedAt:
          type: string
          format: date-time
          nullable: true
          description: Timestamp when the set was performed.
    WeekPoint:
      type: object
      required: [weekStart, totalVolume]
      properties:
        weekStart: { type: string, example: '2025-05-05' }
        totalVolume: { type: number, example: 12500 }
        avgSetVolume: { type: number, example: 180 }
        e1rmAvg: { type: number, nullable: true, example: 110 }

    MuscleSeries:
      type: object
      required: [muscleId, name, points]
      properties:
        muscleId: { type: integer }
        name: { type: string }
        points:
          type: array
          items: { $ref: '#/components/schemas/WeekPoint' }

    MetricSeries:
      type: object
      required: [metricKey, unit, points]
      properties:
        metricKey: { type: string, example: body_weight }
        unit: { type: string, example: kg }
        points:
          type: array
          items:
            type: object
            required: [weekStart, value]
            properties:
              weekStart: { type: string, example: '2025-05-05' }
              value: { type: number, example: 70.4 }

    DashboardResponse:
      type: object
      required: [userId, span, thisWeek, lastWeek, trend, muscles, metrics]
      properties:
        userId: { type: string, format: uuid }
        span: { type: string, example: 4w }
        thisWeek: { $ref: '#/components/schemas/WeekPoint' }
        lastWeek: { $ref: '#/components/schemas/WeekPoint' }
        trend:
          type: array
          items: { $ref: '#/components/schemas/WeekPoint' }
          description: Bar/line data for the requested span.
        muscles:
          type: array
          items: { $ref: '#/components/schemas/MuscleSeries' }
        metrics:
          type: array
          items: { $ref: '#/components/schemas/MetricSeries' }
