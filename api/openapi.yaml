openapi: 3.0.3
info:
  title: Bulktrack API
  version: 1.0.0
  description: |
    API definition for the BulkTrack application.
servers:
  - url: https://api.bulk-track.com/v1
    description: Production server
  - url: http://localhost:8787/v1
    description: Local development server

security:
  - BearerAuth: []

paths:
  # ---------------- Auth ---------------- #
  /v1/auth/device:
    post:
      summary: Activate a new device (anonymous onboarding)
      tags: [Auth]
      parameters:
        - name: X-Device-Id
          in: header
          required: true
          description: UUID v7 of the device
          schema: { type: string, format: uuid }
      responses:
        '200': { description: Device tokens issued, content: { application/json: { schema: { $ref: '#/components/schemas/TokenResponse' } } } }
      security: []

  /v1/auth/apple:
    post:
      summary: Link or sign-in with Apple
      tags: [Auth]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [identityToken]
              properties:
                identityToken: { type: string, description: Apple identity token (JWT) }
      responses:
        '200': { description: User tokens, content: { application/json: { schema: { $ref: '#/components/schemas/TokenResponse' } } } }
      security: []

  /v1/auth/refresh:
    post:
      summary: Refresh access token
      tags: [Auth]
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: '#/components/schemas/RefreshTokenRequest' }
      responses:
        '200': { description: Tokens refreshed, content: { application/json: { schema: { $ref: '#/components/schemas/TokenResponse' } } } }
      security: []

  /v1/auth/logout:
    post:
      summary: Log out (revoke refresh token)
      tags: [Auth]
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: '#/components/schemas/RefreshTokenRequest' }
      responses:
        '204': { description: Logged out }
      security: []

  # ---------------- Users & Devices ---------------- #
  /v1/users:
    post:
      summary: Create user manually (debug / admin)
      tags: [Users]
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: '#/components/schemas/UserCreate' }
      responses:
        '201': { description: Created, content: { application/json: { schema: { $ref: '#/components/schemas/User' } } } }
  
  /v1/devices:
    post:
      summary: Register device to user (post-Apple link)
      tags: [Devices]
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: '#/components/schemas/DeviceCreate' }
      responses:
        '201': { description: Device registered, content: { application/json: { schema: { $ref: '#/components/schemas/Device' } } } }

  # ---------------- Exercises ---------------- #
  /v1/exercises:
    get:
      summary: Search or list recent exercises
      tags: [Exercises]
      parameters:
        - in: query
          name: q
          schema: { type: string }
          description: Prefix search string
        - in: query
          name: locale
          schema: { type: string, default: ja }
      responses:
        '200': { description: List, content: { application/json: { schema: { type: array, items: { $ref: '#/components/schemas/Exercise' } } } } }
    post:
      summary: Create custom exercise
      tags: [Exercises]
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: '#/components/schemas/ExerciseCreate' }
      responses:
        '201': { description: Created, content: { application/json: { schema: { $ref: '#/components/schemas/Exercise' } } } }

  # ---------------- Sessions & Sets ---------------- #
  /v1/sessions:
    post:
      summary: Start workout session
      tags: [Sessions]
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: '#/components/schemas/SessionStart' }
      responses:
        '201': { description: Started, content: { application/json: { schema: { $ref: '#/components/schemas/WorkoutSession' } } } }
    get:
      summary: List recent sessions
      tags: [Sessions]
      parameters:
        - in: query
          name: limit
          schema: { type: integer, default: 20 }
      responses:
        '200': { description: List, content: { application/json: { schema: { type: array, items: { $ref: '#/components/schemas/WorkoutSession' } } } } }

  /v1/sessions/{sessionId}:
    get:
      summary: Get session detail
      tags: [Sessions]
      parameters:
        - $ref: '#/components/parameters/SessionId'
      responses:
        '200': { description: Detail, content: { application/json: { schema: { $ref: '#/components/schemas/SessionDetail' } } } }

  /v1/sessions/{sessionId}/finish:
    post:
      summary: Finish session
      tags: [Sessions]
      parameters:
        - $ref: '#/components/parameters/SessionId'
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                finishedAt: { type: string, format: date-time }
      responses:
        '200': { description: Finished, content: { application/json: { schema: { $ref: '#/components/schemas/WorkoutSession' } } } }

  /v1/sessions/{sessionId}/sets:
    post:
      summary: Add set
      tags: [Sets]
      parameters:
        - $ref: '#/components/parameters/SessionId'
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: '#/components/schemas/SetCreate' }
      responses:
        '201': { description: Recorded, content: { application/json: { schema: { $ref: '#/components/schemas/WorkoutSet' } } } }
    get:
      summary: List sets in session
      tags: [Sets]
      parameters:
        - $ref: '#/components/parameters/SessionId'
      responses:
        '200': { description: List, content: { application/json: { schema: { type: array, items: { $ref: '#/components/schemas/WorkoutSet' } } } } }

  # ---------------- Dashboard ---------------- #
  /v1/dashboard:
    get:
      summary: ユーザーのダッシュボード情報を取得
      tags: [Dashboard]
      parameters:
        - in: query
          name: period
          schema:
            type: string
            enum: [1w, 4w, 12w, 24w]
            default: 1w
          description: "集計期間を指定します (例: 1w = 1週間, 4w = 4週間)"
      responses:
        '200':
          description: ダッシュボード情報
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DashboardResponse'

  # ---------------- Utility ---------------- #
  /v1/ping:
    get:
      summary: Health check
      tags: [Utility]
      responses:
        '200':
          description: pong
          content:
            application/json:
              schema:
                type: object
                properties:
                  message: { type: string, example: pong }
      security: []

components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: Global Bearer auth

  parameters:
    SessionId:
      name: sessionId
      in: path
      required: true
      schema: { type: string, format: uuid }

  # ---- Schemas (same as previous version, trimmed) ---- #
  schemas:
    TokenResponse:
      type: object
      properties:
        accessToken: { type: string }
        refreshToken: { type: string }
        expiresIn: { type: integer }
      required: [accessToken, refreshToken, expiresIn]
    RefreshTokenRequest:
      type: object
      properties:
        refreshToken: { type: string }
      required: [refreshToken]
    UserCreate:
      type: object
      required: [displayName]
      properties:
        displayName: { type: string }
    User:
      allOf:
        - $ref: '#/components/schemas/UserCreate'
        - type: object
          properties:
            id: { type: string, format: uuid }
            createdAt: { type: string, format: date-time }
    DeviceCreate:
      type: object
      required: [userId]
      properties:
        userId: { type: string, format: uuid }
        platform: { type: string }
    Device:
      allOf:
        - $ref: '#/components/schemas/DeviceCreate'
        - type: object
          properties:
            deviceId: { type: string, format: uuid }
            linkedAt: { type: string, format: date-time }
    ExerciseCreate:
      type: object
      required: [canonicalName]
      properties:
        canonicalName: { type: string }
        locale: { type: string }
        name: { type: string }
        aliases: { type: string }
    Exercise:
      allOf:
        - $ref: '#/components/schemas/ExerciseCreate'
        - type: object
          properties:
            id: { type: string, format: uuid }
            isOfficial: { type: boolean }
            lastUsedAt: { type: string, format: date-time }
    SessionStart:
      type: object
      properties:
        menuId: { type: string, format: uuid, nullable: true, description: "Optional menu ID for the session. Can be null." }
    WorkoutSession:
      allOf:
        - $ref: '#/components/schemas/SessionStart'
        - type: object
          properties:
            id: { type: string, format: uuid }
            finishedAt: { type: string, format: date-time }
            createdAt: { type: string, format: date-time }
    SessionDetail:
      type: object
      properties:
        session: { $ref: '#/components/schemas/WorkoutSession' }
        sets:
          type: array
          items: { $ref: '#/components/schemas/WorkoutSet' }
    SetCreate:
      type: object
      required: [exerciseId]
      properties:
        exerciseId: { type: string, format: uuid }
        setNo:
          type: integer
          description: The number of the set within the exercise for the current session.
          nullable: true
          example: 1
        reps:
          type: integer
          description: Number of repetitions performed.
          nullable: true
          example: 10
        weight:
          type: number
          format: float
          description: Weight used for the set (e.g., in kg).
          nullable: true
          example: 60.5
        notes:
          type: string
          description: Optional notes for the set.
          nullable: true
          example: "Felt strong today."
        performedAt:
          type: string
          format: date-time
          description: |
            The time the set was performed, in ISO 8601 format (UTC).
            Expected format: YYYY-MM-DDTHH:mm:ss.sssZ (e.g., "2025-05-08T14:01:15.000Z").
            Milliseconds are optional but recommended.
          nullable: true
          example: "2025-05-08T14:01:15.123Z"
        rpe:
          type: number
          format: float
          description: Rate of Perceived Exertion (e.g., 1-10).
          nullable: true
          example: 7.5
        restSec:
          type: integer
          description: Rest time in seconds after this set.
          nullable: true
          example: 90
        deviceId:
          type: string
          description: ID of the device used to record the set.
          nullable: true
          example: "device-uuid-123"
    WorkoutSet:
      allOf:
        - $ref: '#/components/schemas/SetCreate'
        - type: object
          required:
            - id
            - exerciseId
            - setNo
            - performedAt
            - createdAt
          properties:
            id: { type: string, format: uuid }
            exerciseId: { type: string, format: uuid }
            setNo:
              type: integer
              description: The number of the set.
              example: 1
            performedAt:
              type: string
              format: date-time
              description: |
                The time the set was performed, in ISO 8601 format (UTC).
                Format: YYYY-MM-DDTHH:mm:ss.sssZ (e.g., "2025-05-08T14:01:15.000Z").
              example: "2025-05-08T14:01:15.000Z"
            volume:
              type: number
              format: float
              description: Calculated volume for the set (e.g., weight * reps).
              readOnly: true
              example: 605
            createdAt:
              type: string
              format: date-time
              description: Timestamp of when the set record was created.
              readOnly: true
              example: "2025-05-08T14:02:00.000Z"
    # ---- Dashboard Schemas ----
    MuscleVolumeItem:
      type: object
      properties:
        muscleId: { type: integer, example: 1 }
        name: { type: string, example: "胸" }
        volume: { type: number, format: float, example: 3000 }
      required: [muscleId, name, volume]

    WeeklyVolumeByMuscleItem:
      type: object
      properties:
        muscleId: { type: integer, example: 1 }
        name: { type: string, example: "胸" }
        weeks:
          type: array
          items:
            type: object
            properties:
              week: { type: string, example: "2023-W40" } # YYYY-Www 形式
              volume: { type: number, format: float, example: 2800 }
            required: [week, volume]
      required: [muscleId, name, weeks]
      
    ExerciseVolumeItem:
      type: object
      properties:
        exerciseId: { type: string, format: uuid, example: "ex-uuid-1" }
        name: { type: string, example: "ベンチプレス" }
        totalVolume: { type: number, format: float, example: 8000 }
      required: [exerciseId, name, totalVolume]

    CurrentWeekSummary:
      type: object
      properties:
        totalWorkouts: { type: integer, example: 5 }
        currentStreak: { type: integer, example: 3 }
        totalVolume: { type: number, format: float, example: 12500 }
        volumeByMuscle:
          type: array
          items:
            $ref: '#/components/schemas/MuscleVolumeItem'
      required: [totalWorkouts, currentStreak, totalVolume, volumeByMuscle]

    PeriodSummary:
      type: object
      properties:
        period: { type: string, example: "4w" }
        totalVolume: { type: number, format: float, example: 48000 }
        averageWeeklyVolume: { type: number, format: float, example: 12000 }
        volumeTrend: { type: string, enum: [increasing, decreasing, stable, N/A], example: "increasing" }
        volumeByMuscleOverTime:
          type: array
          items:
            $ref: '#/components/schemas/WeeklyVolumeByMuscleItem'
        topExercisesByVolume:
          type: array
          items:
            $ref: '#/components/schemas/ExerciseVolumeItem'
      required: [period, totalVolume, averageWeeklyVolume, volumeTrend, volumeByMuscleOverTime, topExercisesByVolume]

    ProgressMetricItem:
      type: object
      properties:
        metricKey: { type: string, example: "body_weight" }
        value: { type: string, example: "70.5" } # 数値も文字列として保持し、クライアントで解釈
        unit: { type: string, nullable: true, example: "kg" }
        recordedAt: { type: string, format: "date-time", example: "2023-10-26T08:00:00Z" }
      required: [metricKey, value, recordedAt]
      
    UnderstimulatedMuscleItem:
      type: object
      properties:
        muscleId: { type: integer, example: 4 }
        name: { type: string, example: "上腕三頭筋"}
        lastTrained: { type: string, format: "date-time", nullable: true, example: "2023-10-20T10:00:00Z" } # or date
      required: [muscleId, name]

    DashboardResponse: # これが以前の DashboardStats の代わりとなる
      type: object
      properties:
        userId: { type: string, format: uuid, example: "user-uuid-string" }
        lastSessionId: { type: string, format: uuid, nullable: true, example: "session-uuid-string" }
        deloadWarningSignal: { type: boolean, example: false }
        lastCalculatedAt: { type: string, format: "date-time", example: "2023-10-27T10:00:00Z" }
        currentWeekSummary:
          $ref: '#/components/schemas/CurrentWeekSummary'
        periodSummary:
          $ref: '#/components/schemas/PeriodSummary'
        progressMetrics:
          type: array
          items:
            $ref: '#/components/schemas/ProgressMetricItem'
        understimulatedMuscles:
          type: array
          items:
            $ref: '#/components/schemas/UnderstimulatedMuscleItem'
      required:
        - userId
        - deloadWarningSignal
        - lastCalculatedAt
        - currentWeekSummary
        - periodSummary
        - progressMetrics
        - understimulatedMuscles
    
    # DashboardStats: # 既存の DashboardStats は DashboardResponse に置き換えられたためコメントアウトまたは削除
    #   type: object
    #   properties:
    #     # ... (もしここに定義があった場合) ...

    # ---- End Dashboard Schemas ----
